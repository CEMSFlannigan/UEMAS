%% Data Arrays

% SData_x: x-data
% SData_y: y-data

SData_x = 1e9.*[0;1.96000000000000e-09;3.91000000000000e-09;5.87000000000000e-09;7.82000000000000e-09;9.78000000000000e-09;1.17000000000000e-08;1.37000000000000e-08;1.56000000000000e-08;1.76000000000000e-08;1.96000000000000e-08;2.15000000000000e-08;2.35000000000000e-08;2.54000000000000e-08;2.74000000000000e-08;2.93000000000000e-08;3.13000000000000e-08;3.33000000000000e-08;3.52000000000000e-08;3.72000000000000e-08;3.91000000000000e-08;4.11000000000000e-08;4.30000000000000e-08;4.50000000000000e-08;4.69000000000000e-08;4.89000000000000e-08;5.09000000000000e-08;5.28000000000000e-08;5.48000000000000e-08;5.67000000000000e-08;5.87000000000000e-08;6.06000000000000e-08;6.26000000000000e-08;6.45000000000000e-08;6.65000000000000e-08;6.85000000000000e-08;7.04000000000000e-08;7.24000000000000e-08;7.43000000000000e-08;7.63000000000000e-08;7.82000000000000e-08;8.02000000000000e-08;8.21000000000000e-08;8.41000000000000e-08;8.61000000000000e-08;8.80000000000000e-08;9.00000000000000e-08;9.19000000000000e-08;9.39000000000000e-08;9.58000000000000e-08;9.78000000000000e-08;9.98000000000000e-08;1.02000000000000e-07;1.04000000000000e-07;1.06000000000000e-07;1.08000000000000e-07;1.10000000000000e-07;1.11000000000000e-07;1.13000000000000e-07;1.15000000000000e-07;1.17000000000000e-07;1.19000000000000e-07;1.21000000000000e-07;1.23000000000000e-07;1.25000000000000e-07;1.27000000000000e-07;1.29000000000000e-07;1.31000000000000e-07;1.33000000000000e-07;1.35000000000000e-07;1.37000000000000e-07;1.39000000000000e-07;1.41000000000000e-07;1.43000000000000e-07;1.45000000000000e-07;1.47000000000000e-07;1.49000000000000e-07;1.51000000000000e-07;1.53000000000000e-07;1.55000000000000e-07;1.56000000000000e-07;1.58000000000000e-07;1.60000000000000e-07;1.62000000000000e-07;1.64000000000000e-07;1.66000000000000e-07;1.68000000000000e-07;1.70000000000000e-07;1.72000000000000e-07;1.74000000000000e-07;1.76000000000000e-07;1.78000000000000e-07;1.80000000000000e-07;1.82000000000000e-07;1.84000000000000e-07;1.86000000000000e-07;1.88000000000000e-07;1.90000000000000e-07;1.92000000000000e-07;1.94000000000000e-07;1.96000000000000e-07;1.98000000000000e-07;2.00000000000000e-07;2.01000000000000e-07;2.03000000000000e-07;2.05000000000000e-07;2.07000000000000e-07;2.09000000000000e-07;2.11000000000000e-07;2.13000000000000e-07;2.15000000000000e-07;2.17000000000000e-07;2.19000000000000e-07;2.21000000000000e-07;2.23000000000000e-07;2.25000000000000e-07;2.27000000000000e-07;2.29000000000000e-07;2.31000000000000e-07;2.33000000000000e-07;2.35000000000000e-07;2.37000000000000e-07;2.39000000000000e-07;2.41000000000000e-07;2.43000000000000e-07;2.44000000000000e-07;2.46000000000000e-07;2.48000000000000e-07;2.50000000000000e-07;2.52000000000000e-07;2.54000000000000e-07;2.56000000000000e-07;2.58000000000000e-07;2.60000000000000e-07;2.62000000000000e-07;2.64000000000000e-07;2.66000000000000e-07;2.68000000000000e-07;2.70000000000000e-07;2.72000000000000e-07;2.74000000000000e-07;2.76000000000000e-07;2.78000000000000e-07;2.80000000000000e-07;2.82000000000000e-07;2.84000000000000e-07;2.86000000000000e-07;2.88000000000000e-07;2.89000000000000e-07;2.91000000000000e-07;2.93000000000000e-07;2.95000000000000e-07;2.97000000000000e-07;2.99000000000000e-07;3.01000000000000e-07;3.03000000000000e-07;3.05000000000000e-07;3.07000000000000e-07;3.09000000000000e-07;3.11000000000000e-07;3.13000000000000e-07;3.15000000000000e-07;3.17000000000000e-07;3.19000000000000e-07;3.21000000000000e-07;3.23000000000000e-07;3.25000000000000e-07;3.27000000000000e-07;3.29000000000000e-07;3.31000000000000e-07;3.33000000000000e-07;3.34000000000000e-07;3.36000000000000e-07;3.38000000000000e-07;3.40000000000000e-07;3.42000000000000e-07;3.44000000000000e-07;3.46000000000000e-07;3.48000000000000e-07;3.50000000000000e-07;3.52000000000000e-07;3.54000000000000e-07;3.56000000000000e-07;3.58000000000000e-07;3.60000000000000e-07;3.62000000000000e-07;3.64000000000000e-07;3.66000000000000e-07;3.68000000000000e-07;3.70000000000000e-07;3.72000000000000e-07;3.74000000000000e-07;3.76000000000000e-07;3.77000000000000e-07;3.79000000000000e-07;3.81000000000000e-07;3.83000000000000e-07;3.85000000000000e-07;3.87000000000000e-07;3.89000000000000e-07;3.91000000000000e-07;3.93000000000000e-07;3.95000000000000e-07;3.97000000000000e-07;3.99000000000000e-07;4.01000000000000e-07;4.03000000000000e-07;4.05000000000000e-07;4.07000000000000e-07;4.09000000000000e-07;4.11000000000000e-07;4.13000000000000e-07;4.15000000000000e-07;4.17000000000000e-07;4.19000000000000e-07;4.21000000000000e-07;4.22000000000000e-07;4.24000000000000e-07;4.26000000000000e-07;4.28000000000000e-07;4.30000000000000e-07;4.32000000000000e-07;4.34000000000000e-07;4.36000000000000e-07;4.38000000000000e-07;4.40000000000000e-07;4.42000000000000e-07;4.44000000000000e-07;4.46000000000000e-07;4.48000000000000e-07;4.50000000000000e-07;4.52000000000000e-07;4.54000000000000e-07;4.56000000000000e-07;4.58000000000000e-07;4.60000000000000e-07;4.62000000000000e-07;4.64000000000000e-07;4.66000000000000e-07;4.67000000000000e-07;4.69000000000000e-07;4.71000000000000e-07;4.73000000000000e-07;4.75000000000000e-07;4.77000000000000e-07;4.79000000000000e-07;4.81000000000000e-07;4.83000000000000e-07;4.85000000000000e-07;4.87000000000000e-07;4.89000000000000e-07;4.91000000000000e-07;4.93000000000000e-07;4.95000000000000e-07;4.97000000000000e-07;4.99000000000000e-07;5.01000000000000e-07;5.03000000000000e-07;5.05000000000000e-07;5.07000000000000e-07;5.09000000000000e-07;5.10000000000000e-07;5.12000000000000e-07;5.14000000000000e-07;5.16000000000000e-07;5.18000000000000e-07;5.20000000000000e-07;5.22000000000000e-07;5.24000000000000e-07;5.26000000000000e-07;5.28000000000000e-07;5.30000000000000e-07;5.32000000000000e-07;5.34000000000000e-07;5.36000000000000e-07;5.38000000000000e-07;5.40000000000000e-07;5.42000000000000e-07;5.44000000000000e-07;5.46000000000000e-07;5.48000000000000e-07;5.50000000000000e-07;5.52000000000000e-07;5.54000000000000e-07;5.55000000000000e-07;5.57000000000000e-07;5.59000000000000e-07;5.61000000000000e-07;5.63000000000000e-07;5.65000000000000e-07;5.67000000000000e-07;5.69000000000000e-07;5.71000000000000e-07;5.73000000000000e-07;5.75000000000000e-07;5.77000000000000e-07;5.79000000000000e-07;5.81000000000000e-07;5.83000000000000e-07;5.85000000000000e-07;5.87000000000000e-07;5.89000000000000e-07;5.91000000000000e-07;5.93000000000000e-07;5.95000000000000e-07;5.97000000000000e-07;5.99000000000000e-07;6.00000000000000e-07;6.02000000000000e-07;6.04000000000000e-07;6.06000000000000e-07;6.08000000000000e-07;6.10000000000000e-07;6.12000000000000e-07;6.14000000000000e-07;6.16000000000000e-07;6.18000000000000e-07;6.20000000000000e-07;6.22000000000000e-07;6.24000000000000e-07;6.26000000000000e-07;6.28000000000000e-07;6.30000000000000e-07;6.32000000000000e-07;6.34000000000000e-07;6.36000000000000e-07;6.38000000000000e-07;6.40000000000000e-07;6.42000000000000e-07;6.43000000000000e-07;6.45000000000000e-07;6.47000000000000e-07;6.49000000000000e-07;6.51000000000000e-07;6.53000000000000e-07;6.55000000000000e-07;6.57000000000000e-07;6.59000000000000e-07;6.61000000000000e-07;6.63000000000000e-07;6.65000000000000e-07;6.67000000000000e-07;6.69000000000000e-07;6.71000000000000e-07;6.73000000000000e-07;6.75000000000000e-07;6.77000000000000e-07;6.79000000000000e-07;6.81000000000000e-07;6.83000000000000e-07;6.85000000000000e-07;6.87000000000000e-07;6.88000000000000e-07;6.90000000000000e-07;6.92000000000000e-07;6.94000000000000e-07;6.96000000000000e-07;6.98000000000000e-07;7.00000000000000e-07;7.02000000000000e-07;7.04000000000000e-07;7.06000000000000e-07;7.08000000000000e-07;7.10000000000000e-07;7.12000000000000e-07;7.14000000000000e-07;7.16000000000000e-07;7.18000000000000e-07;7.20000000000000e-07;7.22000000000000e-07;7.24000000000000e-07;7.26000000000000e-07;7.28000000000000e-07;7.30000000000000e-07;7.32000000000000e-07;7.33000000000000e-07;7.35000000000000e-07;7.37000000000000e-07;7.39000000000000e-07;7.41000000000000e-07;7.43000000000000e-07;7.45000000000000e-07;7.47000000000000e-07;7.49000000000000e-07;7.51000000000000e-07;7.53000000000000e-07;7.55000000000000e-07;7.57000000000000e-07;7.59000000000000e-07;7.61000000000000e-07;7.63000000000000e-07;7.65000000000000e-07;7.67000000000000e-07;7.69000000000000e-07;7.71000000000000e-07;7.73000000000000e-07;7.75000000000000e-07;7.76000000000000e-07;7.78000000000000e-07;7.80000000000000e-07;7.82000000000000e-07;7.84000000000000e-07;7.86000000000000e-07;7.88000000000000e-07;7.90000000000000e-07;7.92000000000000e-07;7.94000000000000e-07;7.96000000000000e-07;7.98000000000000e-07;8.00000000000000e-07;8.02000000000000e-07;8.04000000000000e-07;8.06000000000000e-07;8.08000000000000e-07;8.10000000000000e-07;8.12000000000000e-07;8.14000000000000e-07;8.16000000000000e-07;8.18000000000000e-07;8.20000000000000e-07;8.21000000000000e-07;8.23000000000000e-07;8.25000000000000e-07;8.27000000000000e-07;8.29000000000000e-07;8.31000000000000e-07;8.33000000000000e-07;8.35000000000000e-07;8.37000000000000e-07;8.39000000000000e-07;8.41000000000000e-07;8.43000000000000e-07;8.45000000000000e-07;8.47000000000000e-07;8.49000000000000e-07;8.51000000000000e-07;8.53000000000000e-07;8.55000000000000e-07;8.57000000000000e-07;8.59000000000000e-07;8.61000000000000e-07;8.63000000000000e-07;8.65000000000000e-07;8.66000000000000e-07;8.68000000000000e-07;8.70000000000000e-07;8.72000000000000e-07;8.74000000000000e-07;8.76000000000000e-07;8.78000000000000e-07;8.80000000000000e-07;8.82000000000000e-07;8.84000000000000e-07;8.86000000000000e-07;8.88000000000000e-07;8.90000000000000e-07;8.92000000000000e-07;8.94000000000000e-07;8.96000000000000e-07;8.98000000000000e-07;9.00000000000000e-07;9.02000000000000e-07;9.04000000000000e-07;9.06000000000000e-07;9.08000000000000e-07];
SData_y = 1e9.*[1.11000000000000e-08;1.14000000000000e-08;1.17000000000000e-08;1.20000000000000e-08;1.23000000000000e-08;1.26000000000000e-08;1.28000000000000e-08;1.30000000000000e-08;1.32000000000000e-08;1.34000000000000e-08;1.36000000000000e-08;1.37000000000000e-08;1.39000000000000e-08;1.40000000000000e-08;1.42000000000000e-08;1.43000000000000e-08;1.43000000000000e-08;1.43000000000000e-08;1.43000000000000e-08;1.43000000000000e-08;1.43000000000000e-08;1.42000000000000e-08;1.41000000000000e-08;1.40000000000000e-08;1.39000000000000e-08;1.38000000000000e-08;1.37000000000000e-08;1.36000000000000e-08;1.35000000000000e-08;1.33000000000000e-08;1.32000000000000e-08;1.31000000000000e-08;1.29000000000000e-08;1.28000000000000e-08;1.26000000000000e-08;1.25000000000000e-08;1.23000000000000e-08;1.22000000000000e-08;1.20000000000000e-08;1.18000000000000e-08;1.16000000000000e-08;1.13000000000000e-08;1.10000000000000e-08;1.07000000000000e-08;1.04000000000000e-08;1.01000000000000e-08;9.81000000000000e-09;9.52000000000000e-09;9.21000000000000e-09;8.91000000000000e-09;8.61000000000000e-09;8.28000000000000e-09;7.95000000000000e-09;7.60000000000000e-09;7.27000000000000e-09;6.92000000000000e-09;6.57000000000000e-09;6.23000000000000e-09;5.90000000000000e-09;5.58000000000000e-09;5.28000000000000e-09;4.99000000000000e-09;4.71000000000000e-09;4.47000000000000e-09;4.22000000000000e-09;3.99000000000000e-09;3.79000000000000e-09;3.59000000000000e-09;3.42000000000000e-09;3.29000000000000e-09;3.20000000000000e-09;3.17000000000000e-09;3.18000000000000e-09;3.23000000000000e-09;3.32000000000000e-09;3.47000000000000e-09;3.65000000000000e-09;3.87000000000000e-09;4.13000000000000e-09;4.44000000000000e-09;4.79000000000000e-09;5.15000000000000e-09;5.55000000000000e-09;6.00000000000000e-09;6.47000000000000e-09;6.96000000000000e-09;7.47000000000000e-09;7.96000000000000e-09;8.43000000000000e-09;8.89000000000000e-09;9.29000000000000e-09;9.64000000000000e-09;9.96000000000000e-09;1.03000000000000e-08;1.05000000000000e-08;1.08000000000000e-08;1.10000000000000e-08;1.12000000000000e-08;1.13000000000000e-08;1.15000000000000e-08;1.16000000000000e-08;1.16000000000000e-08;1.16000000000000e-08;1.16000000000000e-08;1.15000000000000e-08;1.14000000000000e-08;1.12000000000000e-08;1.11000000000000e-08;1.09000000000000e-08;1.07000000000000e-08;1.06000000000000e-08;1.04000000000000e-08;1.03000000000000e-08;1.02000000000000e-08;1.02000000000000e-08;1.01000000000000e-08;1.01000000000000e-08;1.00000000000000e-08;1.00000000000000e-08;1.00000000000000e-08;1.01000000000000e-08;1.01000000000000e-08;1.02000000000000e-08;1.03000000000000e-08;1.04000000000000e-08;1.05000000000000e-08;1.06000000000000e-08;1.08000000000000e-08;1.09000000000000e-08;1.11000000000000e-08;1.13000000000000e-08;1.15000000000000e-08;1.17000000000000e-08;1.18000000000000e-08;1.19000000000000e-08;1.20000000000000e-08;1.20000000000000e-08;1.20000000000000e-08;1.20000000000000e-08;1.20000000000000e-08;1.19000000000000e-08;1.18000000000000e-08;1.17000000000000e-08;1.16000000000000e-08;1.14000000000000e-08;1.12000000000000e-08;1.10000000000000e-08;1.08000000000000e-08;1.05000000000000e-08;1.03000000000000e-08;1.01000000000000e-08;9.89000000000000e-09;9.74000000000000e-09;9.64000000000000e-09;9.58000000000000e-09;9.58000000000000e-09;9.62000000000000e-09;9.68000000000000e-09;9.79000000000000e-09;9.94000000000000e-09;1.02000000000000e-08;1.04000000000000e-08;1.06000000000000e-08;1.09000000000000e-08;1.12000000000000e-08;1.15000000000000e-08;1.18000000000000e-08;1.21000000000000e-08;1.23000000000000e-08;1.25000000000000e-08;1.26000000000000e-08;1.27000000000000e-08;1.27000000000000e-08;1.27000000000000e-08;1.27000000000000e-08;1.27000000000000e-08;1.26000000000000e-08;1.25000000000000e-08;1.24000000000000e-08;1.23000000000000e-08;1.22000000000000e-08;1.20000000000000e-08;1.19000000000000e-08;1.18000000000000e-08;1.17000000000000e-08;1.16000000000000e-08;1.16000000000000e-08;1.15000000000000e-08;1.15000000000000e-08;1.14000000000000e-08;1.14000000000000e-08;1.14000000000000e-08;1.15000000000000e-08;1.15000000000000e-08;1.16000000000000e-08;1.16000000000000e-08;1.17000000000000e-08;1.17000000000000e-08;1.17000000000000e-08;1.17000000000000e-08;1.17000000000000e-08;1.16000000000000e-08;1.16000000000000e-08;1.15000000000000e-08;1.14000000000000e-08;1.14000000000000e-08;1.13000000000000e-08;1.13000000000000e-08;1.12000000000000e-08;1.12000000000000e-08;1.13000000000000e-08;1.13000000000000e-08;1.13000000000000e-08;1.13000000000000e-08;1.14000000000000e-08;1.15000000000000e-08;1.16000000000000e-08;1.17000000000000e-08;1.18000000000000e-08;1.19000000000000e-08;1.19000000000000e-08;1.20000000000000e-08;1.21000000000000e-08;1.21000000000000e-08;1.22000000000000e-08;1.23000000000000e-08;1.23000000000000e-08;1.23000000000000e-08;1.22000000000000e-08;1.22000000000000e-08;1.21000000000000e-08;1.20000000000000e-08;1.19000000000000e-08;1.18000000000000e-08;1.16000000000000e-08;1.15000000000000e-08;1.13000000000000e-08;1.12000000000000e-08;1.10000000000000e-08;1.09000000000000e-08;1.07000000000000e-08;1.05000000000000e-08;1.03000000000000e-08;9.97000000000000e-09;9.62000000000000e-09;9.27000000000000e-09;8.90000000000000e-09;8.55000000000000e-09;8.24000000000000e-09;7.98000000000000e-09;7.79000000000000e-09;7.63000000000000e-09;7.53000000000000e-09;7.47000000000000e-09;7.48000000000000e-09;7.53000000000000e-09;7.66000000000000e-09;7.83000000000000e-09;8.05000000000000e-09;8.31000000000000e-09;8.56000000000000e-09;8.78000000000000e-09;8.97000000000000e-09;9.12000000000000e-09;9.22000000000000e-09;9.27000000000000e-09;9.29000000000000e-09;9.25000000000000e-09;9.18000000000000e-09;9.10000000000000e-09;8.96000000000000e-09;8.81000000000000e-09;8.68000000000000e-09;8.56000000000000e-09;8.48000000000000e-09;8.41000000000000e-09;8.38000000000000e-09;8.39000000000000e-09;8.42000000000000e-09;8.51000000000000e-09;8.63000000000000e-09;8.76000000000000e-09;8.89000000000000e-09;9.02000000000000e-09;9.12000000000000e-09;9.20000000000000e-09;9.28000000000000e-09;9.34000000000000e-09;9.39000000000000e-09;9.47000000000000e-09;9.55000000000000e-09;9.65000000000000e-09;9.75000000000000e-09;9.86000000000000e-09;1.00000000000000e-08;1.01000000000000e-08;1.03000000000000e-08;1.04000000000000e-08;1.06000000000000e-08;1.07000000000000e-08;1.08000000000000e-08;1.09000000000000e-08;1.10000000000000e-08;1.11000000000000e-08;1.12000000000000e-08;1.13000000000000e-08;1.13000000000000e-08;1.13000000000000e-08;1.13000000000000e-08;1.13000000000000e-08;1.12000000000000e-08;1.11000000000000e-08;1.10000000000000e-08;1.10000000000000e-08;1.09000000000000e-08;1.08000000000000e-08;1.07000000000000e-08;1.07000000000000e-08;1.06000000000000e-08;1.05000000000000e-08;1.05000000000000e-08;1.05000000000000e-08;1.04000000000000e-08;1.05000000000000e-08;1.04000000000000e-08;1.04000000000000e-08;1.04000000000000e-08;1.04000000000000e-08;1.03000000000000e-08;1.02000000000000e-08;1.01000000000000e-08;1.01000000000000e-08;1.00000000000000e-08;1.00000000000000e-08;1.00000000000000e-08;1.01000000000000e-08;1.02000000000000e-08;1.03000000000000e-08;1.04000000000000e-08;1.06000000000000e-08;1.07000000000000e-08;1.08000000000000e-08;1.09000000000000e-08;1.09000000000000e-08;1.10000000000000e-08;1.10000000000000e-08;1.10000000000000e-08;1.09000000000000e-08;1.09000000000000e-08;1.08000000000000e-08;1.07000000000000e-08;1.06000000000000e-08;1.06000000000000e-08;1.05000000000000e-08;1.04000000000000e-08;1.03000000000000e-08;1.03000000000000e-08;1.03000000000000e-08;1.02000000000000e-08;1.03000000000000e-08;1.03000000000000e-08;1.04000000000000e-08;1.05000000000000e-08;1.06000000000000e-08;1.06000000000000e-08;1.07000000000000e-08;1.08000000000000e-08;1.07000000000000e-08;1.07000000000000e-08;1.06000000000000e-08;1.05000000000000e-08;1.04000000000000e-08;1.03000000000000e-08;1.01000000000000e-08;9.91000000000000e-09;9.73000000000000e-09;9.54000000000000e-09;9.38000000000000e-09;9.22000000000000e-09;9.05000000000000e-09;8.91000000000000e-09;8.76000000000000e-09;8.60000000000000e-09;8.45000000000000e-09;8.29000000000000e-09;8.12000000000000e-09;7.97000000000000e-09;7.83000000000000e-09;7.71000000000000e-09;7.60000000000000e-09;7.54000000000000e-09;7.53000000000000e-09;7.55000000000000e-09;7.62000000000000e-09;7.72000000000000e-09;7.87000000000000e-09;8.08000000000000e-09;8.32000000000000e-09;8.57000000000000e-09;8.81000000000000e-09;9.05000000000000e-09;9.25000000000000e-09;9.42000000000000e-09;9.57000000000000e-09;9.69000000000000e-09;9.81000000000000e-09;9.91000000000000e-09;1.00000000000000e-08;1.01000000000000e-08;1.01000000000000e-08;1.02000000000000e-08;1.02000000000000e-08;1.02000000000000e-08;1.01000000000000e-08;1.01000000000000e-08;1.00000000000000e-08;9.98000000000000e-09;9.91000000000000e-09;9.86000000000000e-09;9.80000000000000e-09;9.75000000000000e-09;9.71000000000000e-09;9.67000000000000e-09;9.62000000000000e-09;9.57000000000000e-09;9.52000000000000e-09;9.47000000000000e-09;9.44000000000000e-09;9.39000000000000e-09;9.37000000000000e-09;9.37000000000000e-09;9.38000000000000e-09;9.41000000000000e-09;9.46000000000000e-09;9.53000000000000e-09;9.62000000000000e-09;9.73000000000000e-09;9.82000000000000e-09;9.89000000000000e-09;9.95000000000000e-09;9.96000000000000e-09;9.97000000000000e-09;9.99000000000000e-09;1.00000000000000e-08;1.00000000000000e-08;1.00000000000000e-08;1.01000000000000e-08;1.01000000000000e-08;1.02000000000000e-08;1.03000000000000e-08;1.04000000000000e-08;1.04000000000000e-08;1.05000000000000e-08;1.06000000000000e-08;1.07000000000000e-08;1.07000000000000e-08;1.08000000000000e-08;1.09000000000000e-08;1.10000000000000e-08;1.11000000000000e-08;1.11000000000000e-08;1.12000000000000e-08;1.13000000000000e-08;1.14000000000000e-08;1.15000000000000e-08];
SData_y = SData_y-min(SData_y); % Done to set the data array to zero at the minimum point.

%% Discrete derivatives

dSData_y = diff(SData_y)./diff(SData_x); % First derivative
dSData_y_smooth = smooth(dSData_y); % Smoothed first derivative
mSData_x = zeros(length(SData_x)-1,1); % Array for the position of each half-x point on the array (-1 number of values)
for i = 1:length(SData_x)-1 % Calculating half-positions for x on first derivative
    mSData_x(i) = mean([SData_x(i) SData_x(i+1)]);
end
ddSData_y = smooth(diff(smooth(dSData_y))./diff(mSData_x)); % Second derivative
mmSData_x = zeros(length(mSData_x)-1,1); % Second set of half-values to first set
for i = 1:length(mSData_x)-1 % Calculating second half-values
    mmSData_x(i) = mean([mSData_x(i) mSData_x(i+1)]);
end

%% Calculating Extrema Points (dh/dx = 0)

% SData_extr_pos: Extrema positions on the data array in real space
% SData_extr_posi: Extrema positions on the data array in index

SData_extr_pos = [];
SData_extr_posi = [];

cons_zero = 0; % Used to determine how many zeros are present in a chain. Resulting zero-point is taken as mean of chain of zeros in x-space. This is an edge-case tracking tool
for i = 1:length(dSData_y_smooth) - 1
    if dSData_y_smooth(i) == 0 % If the data is exactly zero, append to zero-chain tracker
        cons_zero = cons_zero + 1;
    elseif (dSData_y_smooth(i) > 0 && dSData_y_smooth(i+1) < 0) || (dSData_y_smooth(i) < 0 && dSData_y_smooth(i+1) > 0) % If there is a change in sign, calculate the zero-passing point
        slope = (dSData_y_smooth(i+1) - dSData_y_smooth(i))/(mSData_x(i+1) - mSData_x(i));
        interc = dSData_y_smooth(i+1) - slope*mSData_x(i+1);
        SData_extr_pos = [SData_extr_pos -interc/slope];
        SData_extr_posi = [SData_extr_posi i];
    end
    
    if cons_zero ~= 0 && dSData_y_smooth(i) ~= 0 % If the zero-chain edge case occurs, calculate the mean point in x-space
        cons_zero = 0;
        zero_loc = (mSData_x(i-1) - mSData_x(i-cons_zero-1))/2 + mSData_x(i-cons_zero-1);
        SData_extr_pos = [SData_extr_pos zero_loc];
        SData_extr_posi = [SData_extr_posi i];
    end
end

%% Plots of Height, First Deriv, Second Deriv, Extrema Locations

figure;
plot(mSData_x,smooth(dSData_y),'LineWidth',2);
hold on;
plot(SData_x,(SData_y - mean(SData_y).*ones(size(SData_y)))/100,'LineWidth',2);
plot(mmSData_x,smooth(ddSData_y)*10,'LineWidth',2);
scatter(SData_extr_pos,zeros(size(SData_extr_pos)),'ko','MarkerFaceColor','k');
set(gca,'FontSize', 26);
xlabel('Distance (nm)', 'FontSize', 26);
ylabel('Arb. Val.','FontSize', 26);
legend({'First Derivative','Height/100 (nm)', 'Second Derivative*10'},'FontSize',26);

%% curvature array

% curv_arr: Determine the curvature of the data at each extrema point
% (min/max identification purposes) using the second derivative array

curv_arr = zeros(size(SData_extr_pos));
num_max = 0; % Tracking the number of maximums
num_min = 0; % Tracking the number of minimums
for i = 1:length(SData_extr_pos)
    [curmmSData_x curmmSData_x_i] = closestDiscrete(SData_extr_pos(i),mmSData_x); %Readjust closest discrete x-value and index
    curddSData_y = ddSData_y(curmmSData_x_i);
    if curddSData_y > 0 % If minimum (second derivative is > 0), set curv_arr(i) = 1
        ddSData_y(SData_extr_posi(i))
        curv_arr(i) = 1;
        num_min = num_min + 1;
    elseif curddSData_y < 0 % If maximum (second derivative is < 0), set curv_arr(i) = -1
        ddSData_y(SData_extr_posi(i))
        curv_arr(i) = -1;
        num_max = num_max + 1;
    end
end

%% min/max identification

SData_max_pos = zeros(1,num_max); % Positions of maximums in real-space
SData_min_pos = zeros(1,num_min); % Positions of minimums in real-space

min_ind = 1; % Index of min position array
max_ind = 1; % Index of max position array
for i = 1:length(curv_arr)
    if curv_arr(i) == 1 % If curving down, append to minimum arrays and extend min index by 1
        SData_min_pos(min_ind) = SData_extr_pos(i);
        min_ind = min_ind + 1;
    elseif curv_arr(i) == -1 % If curving up, append to maximum arrays and extend max index by 1
        SData_max_pos(max_ind) = SData_extr_pos(i);
        max_ind = max_ind + 1;
    end
end

%% max indexes on data-array

% Due to discrepancies between real x-space and discrete x-values in the
% array, identify the closest x-values of each of the maximums

for i = 1:length(SData_max_pos)
    [SData_max(i) SData_maxi(i)] = closestDiscrete(SData_max_pos(i),SData_x);
end

%% min indexes on data-array

% Due to discrepancies between real x-space and discrete x-values in the
% array, identify the closest x-values of each of the minimums

SData_min = zeros(1,length(SData_max_pos)-1);
SData_mini = zeros(1,length(SData_max_pos)-1);
for i = 1:length(SData_maxi)-1
    [SData_min(i) SData_mini(i)] = min(SData_y(SData_maxi(i):SData_maxi(i+1)));
    SData_mini(i) = SData_mini(i) + SData_maxi(i);
end

%% Left/Right Inflection at each max for SData

% Currently tracks the location of the inflection points via max/min on the
% first-derivative curves. Performs a very rough approximation on the
% x-locations, and only begins at the first minimimum.

% Fixes: Begin at first inflection point (or extrema), regardless of max/min and extend to last
% inflection point or extrema

% Requirements: Generate list of inflection points.

% Edge cases: at ends of each data curve, to single out true first
% derivative minimums and maximums, check second derivative for zero at
% that point

% Edge cases: ROI where there are 3 inflection points (1 more than usual)
% What to do in this case? Original intent of code is to fit circle to 

% Going to need a lot of discrete x-searching

figure;
SData_leftInf = zeros(1,length(SData_mini)-1);
SData_leftInfi = zeros(1,length(SData_mini)-1);
SData_rightInf = zeros(1,length(SData_mini)-1);
SData_rightInfi = zeros(1,length(SData_mini)-1);
SData_Inf = zeros(1,length(SData_leftInf) + length(SData_rightInf));
SData_Infi = zeros(1,length(SData_leftInfi) + length(SData_rightInfi));
for i = 1:length(SData_mini)-1
    ROIx = mSData_x(SData_mini(i):SData_mini(i+1));
    ROIy = dSData_y_smooth(SData_mini(i):SData_mini(i+1));
    plot(ROIx,ROIy);
    hold on;
    
    [SData_leftInf(i), SData_leftInfi(i)] = max(ROIy(1:round(end/2)));
    SData_leftInfi(i) = SData_leftInfi(i) + SData_mini(i);
    [SData_rightInf(i), SData_rightInfi(i)] = min(ROIy(round(end/2):end));
    SData_rightInfi(i) = SData_rightInfi(i) + SData_mini(i) + round(length(ROIy)/2);
    SData_Inf(2*i-1) = SData_leftInf(i);
    SData_Inf(2*i) = SData_rightInf(i);
    SData_Infi(2*i-1) = SData_leftInfi(i);
    SData_Infi(2*i) = SData_rightInfi(i);
    
end

%% Radii of Curvature fits

SData_RoCrEx = zeros(1,length(SData_leftInf));
SData_RoCaEx = zeros(1,length(SData_mini) - 1);
SData_RoCbEx = zeros(1,length(SData_mini) - 1);
DoubleRoCleastsq = 0;
figure;
for i = 1:length(SData_Infi)-1
    %plot(SData_x(SData_Infi(i):SData_Infi(i+1)),SData_y(SData_Infi(i):SData_Infi(i+1)));
    %hold on;
    
    [SData_RoCrEx(i) SData_RoCaEx(i) SData_RoCbEx(i)] = radiusofcurv(SData_x(SData_Infi(i):SData_Infi(i+1)),SData_y(SData_Infi(i):SData_Infi(i+1)));
    
     c = scatter(SData_x(SData_Infi(i):SData_Infi(i+1)),SData_y(SData_Infi(i):SData_Infi(i+1)),49,'ks','MarkerFaceColor',[0 0 0]);
     hold on;
    if mod(i,2) ~= 0
        circeval = sqrt(SData_RoCrEx(i).^2 - (SData_x(SData_Infi(i):SData_Infi(i+1)) - SData_RoCaEx(i)).^2) + SData_RoCbEx(i);
         d = plot(SData_x(SData_Infi(i):SData_Infi(i+1)),circeval,'b','LineWidth',3);
    else
        circeval = -sqrt(SData_RoCrEx(i).^2 - (SData_x(SData_Infi(i):SData_Infi(i+1)) - SData_RoCaEx(i)).^2) + SData_RoCbEx(i);
         d = plot(SData_x(SData_Infi(i):SData_Infi(i+1)),circeval,'b','LineWidth',3);
    end
    DoubleRoCleastsq = DoubleRoCleastsq + sum(abs(circeval - SData_y(SData_Infi(i):SData_Infi(i+1))).^2);
    %pause(0.5);
end
% set(gcf,'Position',[0 0 1200 900]);
% set(gca,'FontName','Arial','FontSize',25);
% xlabel('Distance (nm)','FontSize',30,'FontName','Arial');
% ylabel('Height (nm)','FontSize',30,'FontName','Arial');
% legend([c d], {'AFM Data','Curvature Fit'},'FontName','Arial','FontSize',25);

%% Compiling Values

topWidths = zeros(size(SData_leftInf));
botWidths = zeros(size(SData_rightInf));
topROCs = zeros(size(SData_leftInf));
botROCs = zeros(size(SData_rightInf));

for i = 1:length(SData_leftInf)
    topROCs(i) = SData_RoCrEx(2*i-1);
    topWidths(i) = SData_x(SData_rightInfi(i)) - SData_x(SData_leftInfi(i));
end

for i = 1:length(SData_rightInf)-1
    botROCs(i) = SData_RoCrEx(2*i);
    botWidths(i) = SData_x(SData_leftInfi(i+1)) - SData_x(SData_rightInfi(i));
end